// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      String   @default("User") // 'Admin' | 'User'
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments TaskAssignment[]
  comments    Comment[]
  groups      GroupMembership[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  priority    String // 'Low' | 'Medium' | 'High'
  status      String   @default("Pending") // 'Pending' | 'InProgress' | 'Completed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]
  assignments TaskAssignment[]
}

model TaskAssignment {
  id      Int  @id @default(autoincrement())
  taskId  Int
  userId  Int? // For individual assignments (optional)
  groupId Int? // For group assignments (optional)

  task  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId, groupId]) // Ensures there are no duplicate assignments
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int
  userId    Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     GroupMembership[]
  assignments TaskAssignment[]
}

model GroupMembership {
  id      Int @id @default(autoincrement())
  groupId Int
  userId  Int

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) // Ensures that a user is not in a group more than once
}
