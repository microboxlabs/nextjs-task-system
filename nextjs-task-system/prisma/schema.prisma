// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          String? @default("user")
  groups        UserGroup[]
  password      String? 
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Task {
  id            Int     @id @default(autoincrement())
  title         String?
  description   String?
  assignedTo    String?
  idAssignedTo  String?
  dueDate       String?
  priority      String?
  status        String? @default("Pending")
  comments      String?
  creationDate  String?
}

model Group {
  id        String        @id @default(cuid())
  name      String?
  users     UserGroup[]  
}

model UserGroup {
  id       String @id @default(cuid())
  userId    String 
  groupId   String 

  user    User    @relation(fields: [userId], references: [id])
  group   Group   @relation(fields: [groupId], references: [id])
}
